// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/04/2019 21:02:27"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    spi_slave
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module spi_slave_vlg_sample_tst(
	cs_n,
	mosi,
	ref_clk,
	reset_n,
	spi_clk,
	tx_data,
	sampler_tx
);
input  cs_n;
input  mosi;
input  ref_clk;
input  reset_n;
input  spi_clk;
input [7:0] tx_data;
output sampler_tx;

reg sample;
time current_time;
always @(cs_n or mosi or ref_clk or reset_n or spi_clk or tx_data)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module spi_slave_vlg_check_tst (
	miso,
	rx_data,
	rx_valid,
	sampler_rx
);
input  miso;
input [7:0] rx_data;
input  rx_valid;
input sampler_rx;

reg  miso_expected;
reg [7:0] rx_data_expected;
reg  rx_valid_expected;

reg  miso_prev;
reg [7:0] rx_data_prev;
reg  rx_valid_prev;

reg  miso_expected_prev;
reg [7:0] rx_data_expected_prev;
reg  rx_valid_expected_prev;

reg  last_miso_exp;
reg [7:0] last_rx_data_exp;
reg  last_rx_valid_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	miso_prev = miso;
	rx_data_prev = rx_data;
	rx_valid_prev = rx_valid;
end

// update expected /o prevs

always @(trigger)
begin
	miso_expected_prev = miso_expected;
	rx_data_expected_prev = rx_data_expected;
	rx_valid_expected_prev = rx_valid_expected;
end



// expected miso
initial
begin
	miso_expected = 1'bX;
end 
// expected rx_data[ 7 ]
initial
begin
	rx_data_expected[7] = 1'bX;
end 
// expected rx_data[ 6 ]
initial
begin
	rx_data_expected[6] = 1'bX;
end 
// expected rx_data[ 5 ]
initial
begin
	rx_data_expected[5] = 1'bX;
end 
// expected rx_data[ 4 ]
initial
begin
	rx_data_expected[4] = 1'bX;
end 
// expected rx_data[ 3 ]
initial
begin
	rx_data_expected[3] = 1'bX;
end 
// expected rx_data[ 2 ]
initial
begin
	rx_data_expected[2] = 1'bX;
end 
// expected rx_data[ 1 ]
initial
begin
	rx_data_expected[1] = 1'bX;
end 
// expected rx_data[ 0 ]
initial
begin
	rx_data_expected[0] = 1'bX;
end 

// expected rx_valid
initial
begin
	rx_valid_expected = 1'bX;
end 
// generate trigger
always @(miso_expected or miso or rx_data_expected or rx_data or rx_valid_expected or rx_valid)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected miso = %b | expected rx_data = %b | expected rx_valid = %b | ",miso_expected_prev,rx_data_expected_prev,rx_valid_expected_prev);
	$display("| real miso = %b | real rx_data = %b | real rx_valid = %b | ",miso_prev,rx_data_prev,rx_valid_prev);
`endif
	if (
		( miso_expected_prev !== 1'bx ) && ( miso_prev !== miso_expected_prev )
		&& ((miso_expected_prev !== last_miso_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port miso :: @time = %t",  $realtime);
		$display ("     Expected value = %b", miso_expected_prev);
		$display ("     Real value = %b", miso_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_miso_exp = miso_expected_prev;
	end
	if (
		( rx_data_expected_prev[0] !== 1'bx ) && ( rx_data_prev[0] !== rx_data_expected_prev[0] )
		&& ((rx_data_expected_prev[0] !== last_rx_data_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rx_data[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rx_data_expected_prev);
		$display ("     Real value = %b", rx_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rx_data_exp[0] = rx_data_expected_prev[0];
	end
	if (
		( rx_data_expected_prev[1] !== 1'bx ) && ( rx_data_prev[1] !== rx_data_expected_prev[1] )
		&& ((rx_data_expected_prev[1] !== last_rx_data_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rx_data[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rx_data_expected_prev);
		$display ("     Real value = %b", rx_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rx_data_exp[1] = rx_data_expected_prev[1];
	end
	if (
		( rx_data_expected_prev[2] !== 1'bx ) && ( rx_data_prev[2] !== rx_data_expected_prev[2] )
		&& ((rx_data_expected_prev[2] !== last_rx_data_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rx_data[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rx_data_expected_prev);
		$display ("     Real value = %b", rx_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rx_data_exp[2] = rx_data_expected_prev[2];
	end
	if (
		( rx_data_expected_prev[3] !== 1'bx ) && ( rx_data_prev[3] !== rx_data_expected_prev[3] )
		&& ((rx_data_expected_prev[3] !== last_rx_data_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rx_data[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rx_data_expected_prev);
		$display ("     Real value = %b", rx_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rx_data_exp[3] = rx_data_expected_prev[3];
	end
	if (
		( rx_data_expected_prev[4] !== 1'bx ) && ( rx_data_prev[4] !== rx_data_expected_prev[4] )
		&& ((rx_data_expected_prev[4] !== last_rx_data_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rx_data[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rx_data_expected_prev);
		$display ("     Real value = %b", rx_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rx_data_exp[4] = rx_data_expected_prev[4];
	end
	if (
		( rx_data_expected_prev[5] !== 1'bx ) && ( rx_data_prev[5] !== rx_data_expected_prev[5] )
		&& ((rx_data_expected_prev[5] !== last_rx_data_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rx_data[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rx_data_expected_prev);
		$display ("     Real value = %b", rx_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rx_data_exp[5] = rx_data_expected_prev[5];
	end
	if (
		( rx_data_expected_prev[6] !== 1'bx ) && ( rx_data_prev[6] !== rx_data_expected_prev[6] )
		&& ((rx_data_expected_prev[6] !== last_rx_data_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rx_data[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rx_data_expected_prev);
		$display ("     Real value = %b", rx_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rx_data_exp[6] = rx_data_expected_prev[6];
	end
	if (
		( rx_data_expected_prev[7] !== 1'bx ) && ( rx_data_prev[7] !== rx_data_expected_prev[7] )
		&& ((rx_data_expected_prev[7] !== last_rx_data_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rx_data[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rx_data_expected_prev);
		$display ("     Real value = %b", rx_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rx_data_exp[7] = rx_data_expected_prev[7];
	end
	if (
		( rx_valid_expected_prev !== 1'bx ) && ( rx_valid_prev !== rx_valid_expected_prev )
		&& ((rx_valid_expected_prev !== last_rx_valid_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rx_valid :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rx_valid_expected_prev);
		$display ("     Real value = %b", rx_valid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_rx_valid_exp = rx_valid_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module spi_slave_vlg_vec_tst();
// constants                                           
// general purpose registers
reg cs_n;
reg mosi;
reg ref_clk;
reg reset_n;
reg spi_clk;
reg [7:0] tx_data;
// wires                                               
wire miso;
wire [7:0] rx_data;
wire rx_valid;

wire sampler;                             

// assign statements (if any)                          
spi_slave i1 (
// port map - connection between master ports and signals/registers   
	.cs_n(cs_n),
	.miso(miso),
	.mosi(mosi),
	.ref_clk(ref_clk),
	.reset_n(reset_n),
	.rx_data(rx_data),
	.rx_valid(rx_valid),
	.spi_clk(spi_clk),
	.tx_data(tx_data)
);

// cs_n
initial
begin
	cs_n = 1'b1;
	cs_n = #10000 1'b0;
	cs_n = #640000 1'b1;
	cs_n = #320000 1'b0;
end 

// ref_clk
always
begin
	ref_clk = 1'b0;
	ref_clk = #2000 1'b1;
	#2000;
end 

// reset_n
initial
begin
	reset_n = 1'b1;
end 

// mosi
initial
begin
	mosi = 1'b0;
	mosi = #30000 1'b1;
	mosi = #100000 1'b0;
	mosi = #40000 1'b1;
	mosi = #40000 1'b0;
	mosi = #110000 1'b1;
	mosi = #70000 1'b0;
	mosi = #40000 1'b1;
	mosi = #90000 1'b0;
	mosi = #200000 1'b1;
	mosi = #60000 1'b0;
end 

// spi_clk
always
begin
	spi_clk = 1'b0;
	spi_clk = #20000 1'b1;
	#20000;
end 
// tx_data[ 7 ]
initial
begin
	tx_data[7] = 1'b0;
end 
// tx_data[ 6 ]
initial
begin
	tx_data[6] = 1'b0;
end 
// tx_data[ 5 ]
initial
begin
	tx_data[5] = 1'b0;
end 
// tx_data[ 4 ]
initial
begin
	tx_data[4] = 1'b0;
end 
// tx_data[ 3 ]
initial
begin
	tx_data[3] = 1'b0;
end 
// tx_data[ 2 ]
initial
begin
	tx_data[2] = 1'b0;
end 
// tx_data[ 1 ]
initial
begin
	tx_data[1] = 1'b0;
end 
// tx_data[ 0 ]
initial
begin
	tx_data[0] = 1'b0;
end 

spi_slave_vlg_sample_tst tb_sample (
	.cs_n(cs_n),
	.mosi(mosi),
	.ref_clk(ref_clk),
	.reset_n(reset_n),
	.spi_clk(spi_clk),
	.tx_data(tx_data),
	.sampler_tx(sampler)
);

spi_slave_vlg_check_tst tb_out(
	.miso(miso),
	.rx_data(rx_data),
	.rx_valid(rx_valid),
	.sampler_rx(sampler)
);
endmodule

